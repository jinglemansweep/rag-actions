name: "LangChain RAG Indexer"
description: "Loads text or webpages, chunks, creates embeddings, stores in Supabase"
author: "JingleManSweep"

inputs:
  action_mode:
    description: "Action mode: 'ingest' for ingestion, 'query' for querying"
    required: true
    default: "query"
    options:
      - "ingest"
      - "query"
  openai_api_key:
    description: "OpenAI API Key"
    required: true
  embedding_model:
    description: "OpenAI Embedding model name"
    required: false
    default: "text-embedding-ada-002"
  supabase_url:
    description: "Supabase instance URL"
    required: true
  supabase_key:
    description: "Supabase service role key"
    required: true
  supabase_table:
    description: "Supabase table name"
    required: false
    default: "rag_chunks"
  chunk_size:
    description: "Chunk size for text splitting"
    required: false
    default: "500"
  chunk_overlap:
    description: "Chunk overlap for text splitting"
    required: false
    default: "50"
  ingest_dir:
    description: "Content ingestion directory"
    required: false
    default: ""
  ingest_text:
    description: "Text to ingest"
    required: false
    default: ""
  ingest_metadata:
    description: "Metadata for the ingestion"
    required: false
    default: "{}"
  query_text:
    description: "Text to query"
    required: false
    default: ""
  query_top_k:
    description: "Number of top results to return for queries"
    required: false
    default: "5"

runs:
  using: docker
  image: ../../../Dockerfile
  env:
    ACTION_MODE: ${{ inputs.action_mode }}
    OPENAI_API_KEY: ${{ inputs.openai_api_key }}
    EMBEDDING_MODEL: ${{ inputs.embedding_model }}
    SUPABASE_URL: ${{ inputs.supabase_url }}
    SUPABASE_KEY: ${{ inputs.supabase_key }}
    SUPABASE_TABLE: ${{ inputs.supabase_table }}
    CHUNK_SIZE: ${{ inputs.chunk_size }}
    CHUNK_OVERLAP: ${{ inputs.chunk_overlap }}
    INGEST_DIR: ${{ inputs.ingest_dir }}
    INGEST_TEXT: ${{ inputs.ingest_text }}
    INGEST_METADATA: ${{ inputs.ingest_metadata }}
    QUERY_TEXT: ${{ inputs.query_text }}
    QUERY_TOP_K: ${{ inputs.query_top_k }}
